{
  "name": "handlebars-helper-compose",
  "version": "0.2.11",
  "description": "{{compose}} handlebars helper. Inlines content from multiple files optionally using wildcard (globbing/minimatch) patterns, extracts YAML front matter to pass to context for each file. Accepts compare function as 3rd parameter for sorting inlined files. Good for blog posts, chapters, etc.",
  "homepage": "https://github.com/helpers/handlebars-helper-compose",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/helpers/handlebars-helper-compose.git"
  },
  "bugs": {
    "url": "https://github.com/helpers/handlebars-helper-compose/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/helpers/handlebars-helper-compose/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./index.js",
  "dependencies": {
    "fs-utils": "~0.1.5",
    "globule": "~0.2.0",
    "lodash": "~2.4.0",
    "marked": "0.3.0",
    "marked-extras": "~0.2.0",
    "underscore.string": "~2.3.3",
    "gray-matter": "~0.2.6"
  },
  "devDependencies": {
    "assemble": "~0.4.34",
    "assemble-contrib-permalinks": "~0.3.2",
    "grunt": "~0.4.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-readme": "~0.4.5",
    "grunt-repos": "~0.1.2",
    "grunt-sync-pkg": "~0.1.2",
    "handlebars-helper-prettify": "~0.2.1",
    "handlebars-helper-slugify": "~0.2.0",
    "time-grunt": "~0.2.8"
  },
  "keywords": [
    "handlebars helper",
    "handlebars-helper-prettify",
    "handlebars-helper-slugify",
    "helper"
  ],
  "readme": "# {{compose}} [![NPM version](https://badge.fury.io/js/handlebars-helper-compose.png)](http://badge.fury.io/js/handlebars-helper-compose)\n\n> {{compose}} handlebars helper. Inlines content from multiple files optionally using wildcard (globbing/minimatch) patterns, extracts YAML front matter to pass to context for each file. Accepts compare function as 3rd parameter for sorting inlined files.\n\n## Quickstart\nIn the root of your project, run the following in the command line:\n\n```bash\nnpm i handlebars-helper-compose --save-dev\n```\n\nNext, in your Gruntfile, simply add `handlebars-helper-compose` to the `helpers` property in the [Assemble](http://assemble.io) task or target options:\n\n```javascript\ngrunt.initConfig({\n  assemble: {\n    options: {\n      // the 'handlebars-helper-compose' modules must also be listed in devDependencies\n      // for assemble to automatically resolve the helper\n      helpers: ['handlebars-helper-compose']\n    }\n    files: {\n      '_gh_pages/': ['templates/*.hbs']\n    }\n  }\n});\n```\n\nWith that completed, you may now use the `{{compose}}` helper in your templates:\n\n```handlebars\n{{compose src=\"blog/posts/*.md\"}}\n  <h1>Title: {{@title}}</h1>\n  {{{@content}}}</p>\n{{/compose}}\n```\nNote that the path used in the `src` hash option is relative to the project root (e.g. Gruntfile).\n\n\n## Context & Lo-Dash templates\n\nThe helper will also process any valid Lo-Dash templates in the YAML front matter of any targeted files. For example:\n\n```handlebars\n---\ntitle: <%= blog.title %>\npost: 1\nheading: <%= blog.title %> | Blog <%= post %>\n---\n<h1>{{title}}</h1>\n<p class=\"heading\">{{heading}}</p>\n```\n\n\n\n## Options\n\n### src\nType: `String` (optional)\n\nDefault: `undefined`\n\nThe file path of the file(s) to include. Glob patterns may be used.\n\n### cwd\nType: `String` (optional)\n\nDefault: `undefined`\n\nThe `cwd` for paths defined in the helper.\n\n### sep\nType: `String`\n\nDefault: `\\n`\n\nThe separator to append after each inlined file.\n\n### marked\nType: `Object`\n\nDefault: `\\n`\n\nThe separator to append after each inlined file.\n\n### filter\nType: `function`\n\nDefault: `undefined`\n\nA custom function for filtering the array of paths returned from the `src` property. This could potentially be more flexible, please make a feature request if you have a use case.\n\n### compare\nType: `Function`\n\nDefault: `function(a, b) {return a.index >= b.index ? 1 : -1;}`\n\nCompare function for sorting the aggregated files.\n\n\n\n\n\n## Defining options\n\n### \"assemble\" task options\n\n> If you use Grunt and [Assemble](http://assemble.io), you can pass options from the `assemble` task in the Gruntfile to the helper.\n\nIn your project's Gruntfile, options for the `{{#compose}}...{{/compose}}` helper can be defined in the Assemble task options:\n\n```javascript\nassemble: {\n  options: {\n    helpers: ['handlebars-helper-compose', 'foo/*.js'],\n    compose: {\n      cwd: './posts',\n      sep: '<!-- post -->',\n      compare: function(a, b) {\n        return a.index >= b.index ? 1 : -1;\n      }\n    }\n  },\n  files: {}\n}\n```\n\nNote that the options are defined in `options: {compose: {}}`, which is registered by this helper as a [custom property](http://assemble.io/docs/Custom-Helpers.html) in the Assemble options.\n\n\n\n## Examples\n\n### all options\n\n```js\nassemble: {\n  options: {\n    compose: {\n      cwd: 'posts',\n      sep: '<!-- post -->',\n      compare: function(a, b) {\n        return a.index >= b.index ? 1 : -1;\n      }\n    }\n  }\n}\n```\n\n### filtering\n\nExample: return only the last two items from the `src` files array:\n\n```js\nassemble: {\n  options: {\n    compose: {\n      cwd: 'posts',\n      sep: '<!-- post -->',\n      filter: function(arr) {\n        return arr.slice(Math.max(arr.length - 2, 0));\n      }\n    }\n  }\n}\n```\n\n\n\n### cwd option\n\nInstead of defining the entire path in the `src` hash option, like this:\n\n```handlebars\n{{compose src=\"path/to/my/blog/posts/*.md\"}}\n  <h1>{{@title}}</h1>\n  {{@content}}\n{{/compose}}\n```\n\nYou could define the `cwd` in the `compose` options in your project's Gruntfile:\n\n```javascript\nassemble: {\n  options: {\n    helpers: ['helper-compose'],\n    compose: {\n      cwd: 'path/to/my/blog'\n    }\n  }\n}\n```\nand then define paths in the templates like this:\n\n```handlebars\n{{compose 'posts/*.md'}}\n  <h1>{{@title}}</h1>\n  {{@content}}\n{{/compose}}\n```\n\n## Usage example\n\nIn our Gruntfile, let's say we have the following config:\n\n```js\n// Project configuration.\ngrunt.initConfig({\n\n  // Metadata for our blog.\n  blog: require('./test/fixtures/blog/blog.yml'),\n  assemble: {\n    options: {\n      helpers: ['handlebars-helper-compose'],\n      compose: {\n        cwd: 'blog',\n        sep: '<!-- post -->'\n      }\n    },\n    blog: {\n      src: ['index.hbs'],\n      dest: 'blog/'\n    }\n  }\n});\n```\n\n### page\n\n...and `index.hbs` file contains the following:\n\n\n```handlebars\n<!-- post -->\n{{#compose src=\"posts/*.md\" sep=\"<!-- post -->\"}}\n  <h1>{{blog.title}}</h1>\n  <h2>Post title: {{@title}}</h2>\n  <p>{{{@content}}}</p>\n{{/compose}}\n```\n\n### posts\n..and we have a few posts, `monday.md`, `tuesday.md`, and `wednesday.md`, for example:\n\n```handlebars\n---\ntitle: Monday\n---\n\nThis is the {{title}} post...\n```\n\n### result\n\nThe result, `blog/index.html` would look something like:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My Brilliant Blog</title>\n  </head>\n  <body>\n\n    <!-- post -->\n    <h1>My Brilliant Blog</h1>\n    <h2>Post title: Monday</h2>\n    <p>This is the Monday post...</p>\n\n    <!-- post -->\n    <h1>My Brilliant Blog</h1>\n    <h2>Post title: Tuesday</h2>\n    <p>This is the Tuesday post...</p>\n\n    <!-- post -->\n    <h1>My Brilliant Blog</h1>\n    <h2>Post title: Wednesday</h2>\n    <p>This is the Wednesday post...</p>\n  </body>\n</html>\n```\n\n\n## Author\n\n**Jon Schlinkert**\n\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n+ [github/jonschlinkert](http://github.com/jonschlinkert)\n\n\n## License and Copyright\nLicensed under the [MIT License](./LICENSE-MIT).\nCopyright (c) 2014 Jon Schlinkert, contributors.\n",
  "readmeFilename": "README.md",
  "_id": "handlebars-helper-compose@0.2.11",
  "_shasum": "057de63313942850f42ae188a6c37523b7fcc99e",
  "_resolved": "git+https://github.com/chrislim/handlebars-helper-compose#f644287e7421ece059060941f4a5398b560ff58f",
  "_from": "handlebars-helper-compose@git+https://github.com/chrislim/handlebars-helper-compose"
}
